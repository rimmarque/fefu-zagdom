{% import _self as macros %}


{% set scope = {
    currentPage: currentPage ?? 0,
    lastPage: lastPage ?? 0,
    queryParameters: queryParameters ?? {},
    alwaysShowFirstAndLast: alwaysShowFirstAndLast ?? true,
    extremePagesAmount: extremePagesAmount ?? 2,
    nearbyPagesAmount: nearbyPagesAmount ?? 1,
    paginationPath: paginationPath ?? '',
    urlType: urlType ?? 'query',
} %}

{% macro urlWithQuery(url, query) %}
    {{ url ~ '?' ~ query|url_encode }}
{% endmacro %}

{% macro paginationUrl(scope, url, query) %}
    {% import _self as macros %}

    {% apply spaceless %}
        {% if scope.urlType == 'query' %}
            {{ macros.urlWithQuery(url, query) }}
        {% elseif scope.urlType == 'slash' %}
            {% set queryString = query|merge({ page: null })|url_encode %}
            {{ url }}/{{ query.page }}{{ queryString ? '?' ~ queryString }}
        {% else %}
            {{ url }}
        {% endif %}
    {% endapply %}
{% endmacro %}

{% macro item(scope, i) %}
    {% import _self as macros %}

    <li class="Pagination__item Pagination__item--desktop">
        <a
            href="{{ macros.paginationUrl(
                scope,
                scope.paginationPath,
                scope.queryParameters|merge({ page: i }))
            }}"
            class="Pagination__link"
        >
            {{ i }}
        </a>
    </li>
{% endmacro %}

{% macro arrow(scope, type = 'prev') %}
    {% set icon = type == 'prev' ? 'angle-left' : 'angle-right' %}
    {% set page = type == 'prev' ? scope.currentPage - 1 : scope.currentPage + 1 %}
    {% set title = type == 'prev' ? 'Назад' : 'Вперед' %}
    {% set modifier = type %}

    <li class="Pagination__item Pagination__item--{{ modifier }}">
        <a
            href="{{ macros.paginationUrl(
                scope,
                scope.paginationPath,
                scope.queryParameters|merge({ page: page }))
            }}"
            title="{{ title }}"
            class="Pagination__link Pagination__link--{{ modifier }}"
        >
            {{ source('assets/icons/' ~ icon ~ '.svg') }}
        </a>
    </li>
{% endmacro %}

{% macro disabledArrow(type = 'prev') %}
    {% set icon = type == 'prev' ? 'angle-left' : 'angle-right' %}
    {% set modifier = type %}

    <li class="Pagination__item Pagination__item--{{ modifier }}">
        <button
            type="button"
            class="Pagination__link Pagination__link--{{ modifier }}"
            tabindex="-1"
            disabled
        >
            {{ source('assets/icons/' ~ icon ~ '.svg') }}
        </button>
    </li>
{% endmacro %}

{% macro ellipses() %}
    <li class="Pagination__item Pagination__item--desktop">
        <button
            type="button"
            class="Pagination__link Pagination__link--ellipses"
            tabindex="-1"
        >
            …
        </button>
    </li>
{% endmacro %}

{% macro currentPage(i) %}
    <li class="Pagination__item Pagination__item--desktop">
        <button
            type="button"
            class="Pagination__link Pagination__link--active"
            tabindex="-1"
        >
            {{ i }}
        </button>
    </li>
{% endmacro %}

{% macro mobileSelect(scope) %}
    <li class="Pagination__item Pagination__item--mobile">
        <select
            class="Pagination__mobileSelect"
            aria-label="Номер страницы"
            onchange="window.location = `{{ macros.paginationUrl(scope,scope.paginationPath, scope.queryParameters|merge({ page: '' })) }}${ this.value }`"
        >
            {% for page in range(1, scope.lastPage) %}
                <option
                    value="{{ page }}"
                    {{ page == scope.currentPage ? 'selected' }}
                >
                    Страница {{ page }}
                </option>
            {% endfor %}
        </select>
    </li>
{% endmacro %}

{% macro content(scope) %}
    {% import _self as macros %}

    {% if scope.lastPage > 1 %}
        <ul class="Pagination">
            {% if scope.currentPage > 1 %}
                {{ macros.arrow(scope, 'prev') }}

                {% for i in range(1, scope.extremePagesAmount) %}
                    {% if (i < scope.currentPage - scope.nearbyPagesAmount) %}
                        {{ macros.item(scope, i) }}
                    {% endif %}
                {% endfor %}

                {% if scope.extremePagesAmount + 1 < scope.currentPage - scope.nearbyPagesAmount %}
                    {{ macros.ellipses }}
                {% endif %}

                {% for i in range(scope.currentPage - scope.nearbyPagesAmount, scope.currentPage - 1) %}
                    {% if (i > 0) %}
                        {{ macros.item(scope, i) }}
                    {% endif %}
                {% endfor %}
            {% elseif scope.alwaysShowFirstAndLast %}
                {{ macros.disabledArrow('prev') }}
            {% endif %}

            {{ macros.mobileSelect(scope) }}

            {{ macros.currentPage(scope.currentPage) }}

            {% if scope.currentPage < scope.lastPage %}
                {% for i in range(scope.currentPage + 1, scope.currentPage + scope.nearbyPagesAmount) %}
                    {% if (i <= scope.lastPage) %}
                        {{ macros.item(scope, i) }}
                    {% endif %}
                {% endfor %}

                {% if (scope.lastPage - scope.extremePagesAmount) > (scope.currentPage + scope.nearbyPagesAmount) %}
                    {{ macros.ellipses }}
                {% endif %}

                {% for i in range(scope.lastPage - scope.extremePagesAmount + 1, scope.lastPage) %}
                    {% if (i > scope.currentPage + scope.nearbyPagesAmount) %}
                        {{ macros.item(scope, i) }}
                    {% endif %}
                {% endfor %}

                {{ macros.arrow(scope, 'next') }}
            {% elseif scope.alwaysShowFirstAndLast %}
                {{ macros.disabledArrow('next') }}
            {% endif %}
        </ul>
    {% endif %}
{% endmacro %}

{{ macros.content(scope) }}
